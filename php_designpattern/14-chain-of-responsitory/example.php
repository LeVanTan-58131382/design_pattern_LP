<?php
interface handler
{
    public function handle($request) ;
}

abstract class abstractHandler implements handler
{
    protected handler $nextHandler ;
    public function handle($request)
    {
        // TODO: Implement handle() method.
        if($this->nextHandler!=null)
        {
            $this->nextHandler->handle($request);
        }
        else
        {
            echo "không thể giải quyết vấn đề ";
        }
    }
    public function setNextHandler(handler $handler)
    {
        $this->nextHandler=$handler;
    }
}

class handler1 extends abstractHandler
{
    public function handle($request)
    {
        if($request<=1)
        {
            echo "handler 1 đã giải quyết thành công";
        }
        else {
            echo "handler 1 không giải quyết được nhờ handler2 giải quyết giúp, Cảm ơn ";
            echo "<br>";
            parent::handle($request); // TODO: Change the autogenerated stub
        }
    }
}

class handler2 extends abstractHandler
{
    public function handle($request)
    {
        if($request<=2)
        {
            echo "handler 2 đã giải quyết thành công";
        }
        else {
            echo "handler 2 không giải quyết được nhờ handler 3 giải quyết giúp, Cảm ơn";
            echo "<br>";
            parent::handle($request); // TODO: Change the autogenerated stub
        }
    }
}

class handler3 extends abstractHandler
{
    public function handle($request)
    {
        if($request<=3)
        {
            echo "handler 3 đã giải quyết thành công";
        }
        else
            parent::handle($request); // TODO: Change the autogenerated stub
    }
}

$request=3;
$h1=new handler1();
$h2=new handler2();
$h3=new handler3();
$h1->setNextHandler($h2);
$h2->setNextHandler($h3);

$h1->handle($request);

